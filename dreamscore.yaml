openapi: "3.0.2"
info:
  title: DreamScore API
  description: The DreamScore API is an OpenAPI specification that provides a detailed description of a soccer league management system. It includes endpoints for managing users, seasons, leagues, players, and transfers.
  license:
    name: All rights reserved
    url: https://github.com/dreamscore-oss/openapi/blob/main/LICENSE.md
  version: "1.0.0"
servers:
  - url: https://api.dreamscore.com/{basePath}
    description: DreamScore API
    variables:
      basePath:
        default: v1

tags:
  - name: /users
    description: Operations related to the users
  - name: /competitions
    description: Operations related to the competitions
  - name: /seasons
    description: Operations related to the seasons
  - name: /competitors
    description: Operations related to the competitors
  - name: /schedules
    description: Operations related to the schedules
  - name: /players
    description: Operations related to the players
  - name: /leagues
    description: Operations related to the leagues
  - name: /managers
    description: Operations related to the managers
  - name: /transfers
    description: Operations related to the transfers
  - name: /offers
    description: Operations related to the offers

paths:
  /users:
    post:
      tags:
        - /users
      summary: Create a new user
      responses:
        "201":
          description: The user was created successfully
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The ID of the user

  /users/{userId}:
    get:
      tags:
        - /users
      summary: Get the user details
      parameters:
        - $ref: "#/components/parameters/userIdPath"
      responses:
        "200":
          description: The details of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    patch:
      tags:
        - /users
      summary: Update the user details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "204":
          description: The user was updated successfully

  /seasons/{seasonId}/competitors:
    get:
      tags:
        - /seasons
      summary: Get the competitors of a specific season
      parameters:
        - $ref: "#/components/parameters/seasonIdPath"
      responses:
        "200":
          description: List of competitors
          content:
            application/json:
              schema:
                properties:
                  competitors:
                    items:
                      $ref: "#/components/schemas/competitorPreview"

  /seasons/{seasonId}/schedules:
    get:
      tags:
        - /seasons
      summary: Get the schedules of a specific season
      parameters:
        - $ref: "#/components/parameters/seasonIdPath"
      responses:
        "200":
          description: List of schedules
          content:
            application/json:
              schema:
                properties:
                  schedules:
                    items:
                      $ref: "#/components/schemas/schedule"

  /seasons/{seasonId}/top-players:
    get:
      tags:
        - /seasons
      summary: Get the top players of a specific season
      parameters:
        - $ref: "#/components/parameters/seasonIdPath"
        - $ref: "#/components/parameters/scheduleIdQuery"
      responses:
        "200":
          description: List of top players
          content:
            application/json:
              schema:
                properties:
                  topPlayers:
                    items:
                      $ref: "#/components/schemas/playerPreview"

  /competitors/{competitorId}:
    get:
      tags:
        - /competitors
      summary: Get the competitor details
      parameters:
        - $ref: "#/components/parameters/competitorIdPath"
      responses:
        "200":
          description: The details of the competitor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/competitorSummary"

  /players/{playerId}/profile:
    get:
      tags:
        - /players
      summary: Get player profile details
      parameters:
        - $ref: "#/components/parameters/playerIdPath"
        - $ref: "#/components/parameters/leagueIdQuery"
      responses:
        "200":
          description: The player profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerProfile"

  /players/{playerId}/summary:
    get:
      tags:
        - /players
      summary: Get player summary
      parameters:
        - $ref: "#/components/parameters/playerIdPath"
      responses:
        "200":
          description: The player summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerSummary"

  /players/{playerId}/points:
    get:
      tags:
        - /players
      summary: Get player points
      parameters:
        - $ref: "#/components/parameters/playerIdPath"
      responses:
        "200":
          description: The points of the player
          content:
            application/json:
              schema:
                properties:
                  points:
                    items:
                      $ref: "#/components/schemas/playerSeasonPoints"

  /players/{playerId}/market:
    get:
      tags:
        - /players
      summary: Get player market details
      parameters:
        - $ref: "#/components/parameters/playerIdPath"
      responses:
        "200":
          description: The market details of the player
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerMarket"

  /players/{playerId}/transfers:
    get:
      tags:
        - /players
      summary: Get player transfers
      parameters:
        - $ref: "#/components/parameters/playerIdPath"
        - $ref: "#/components/parameters/leagueIdQuery"
      responses:
        "200":
          description: A list of transfers
          content:
            application/json:
              schema:
                properties:
                  marketValue:
                    type: number
                    format: float
                    description: The market value of the player
                  transfers:
                    items:
                      $ref: "#/components/schemas/transfer"

  /leagues:
    get:
      tags:
        - /leagues
      summary: Get all leagues a user is part of
      responses:
        "200":
          description: A list of leagues a user is part of
          content:
            application/json:
              schema:
                properties:
                  leagues:
                    items:
                      allOf:
                        - $ref: "#/components/schemas/leagueWithId"
                        - properties:
                            squadValue:
                              type: number
                              format: float
                              description: The squad value of the user
                            budget:
                              type: number
                              format: float
                              description: The budget of the user
                            playersInLineup:
                              type: integer
                              format: int64
                              description: The amount of players in the lineup

    post:
      tags:
        - /leagues
      summary: Create a new league
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/league"
              properties:
                settings:
                  $ref: "#/components/schemas/leagueSettings"
      responses:
        "201":
          description: League successfully created.
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The ID of the league

  /leagues/{leagueId}:
    get:
      tags:
        - /leagues
      summary: Get a specific league
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
      responses:
        "200":
          description: The details of the league
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/leagueSummary"

    patch:
      tags:
        - /leagues
      summary: Update a league
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/league"
              properties:
                settings:
                  $ref: "#/components/schemas/leagueSettings"
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
      responses:
        "204":
          description: League successfully updated.

  /leagues/{leagueId}/managers:
    get:
      tags:
        - /leagues
      summary: Get all managers
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
        - $ref: "#/components/parameters/scheduleIdQuery"
      responses:
        "200":
          description: A list of managers in the league
          content:
            application/json:
              schema:
                properties:
                  managers:
                    items:
                      $ref: "#/components/schemas/managerPreview"

    post:
      tags:
        - /leagues

      summary: Add user as manager
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
      requestBody:
        description: The user to be added as manager to the league
        required: true
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: integer
                  format: int64
                  description: The ID of the user
      responses:
        "201":
          description: User successfully added as manager to the league.

  /managers/{managerId}:
    patch:
      tags:
        - /managers
      summary: Update a manager
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      requestBody:
        description: The new details of the manager
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/managerSettings"
      responses:
        "204":
          description: The manager was updated successfully

    delete:
      tags:
        - /managers
      summary: Delete a manager
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "204":
          description: The manager was deleted successfully

  /managers/{managerId}/profile:
    get:
      tags:
        - /managers
      summary: Get manager profile details
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: The manager profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manager"

  /managers/{managerId}/summary:
    get:
      tags:
        - /managers
      summary: Get manager summary
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: The manager summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/managerSummary"

  /managers/{managerId}/points:
    get:
      tags:
        - /managers
      summary: Get manager points
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: The points of the manager
          content:
            application/json:
              schema:
                properties:
                  points:
                    items:
                      $ref: "#/components/schemas/managerPoints"

  /managers/{managerId}/lineup:
    get:
      tags:
        - /managers
      summary: Get manager lineup
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: The lineup of the manager
          content:
            application/json:
              schema:
                properties:
                  lineup:
                    $ref: "#/components/schemas/lineup"

    patch:
      tags:
        - /managers
      summary: Update manager lineup
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      requestBody:
        description: The new lineup of the manager
        required: true
        content:
          application/json:
            schema:
              properties:
                lineup:
                  $ref: "#/components/schemas/lineup"
      responses:
        "204":
          description: The lineup was updated successfully

  /managers/{managerId}/players:
    get:
      tags:
        - /managers
      summary: Get player the manager owns
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: The players of the manager
          content:
            application/json:
              schema:
                properties:
                  players:
                    items:
                      allOf:
                        - $ref: "#/components/schemas/playerPreview"
                        - properties:
                            onTransferMarket:
                              type: boolean
                              description: If the player is in an active transfer

  /managers/{managerId}/transfers:
    get:
      tags:
        - /managers
      summary: Get all transfers of the manager
      parameters:
        - $ref: "#/components/parameters/managerIdPath"
      responses:
        "200":
          description: A list of transfers
          content:
            application/json:
              schema:
                properties:
                  transfers:
                    items:
                      $ref: "#/components/schemas/transferPreview"

  /leagues/{leagueId}/transfers:
    get:
      tags:
        - /leagues
      summary: Get all transfers
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
      responses:
        "200":
          description: A list of transfers
          content:
            application/json:
              schema:
                properties:
                  transfers:
                    items:
                      $ref: "#/components/schemas/transferPreviewWithManager"

    post:
      tags:
        - /leagues
      summary: Add transfer
      parameters:
        - $ref: "#/components/parameters/leagueIdPath"
      requestBody:
        description: The details of the player and the price
        required: true
        content:
          application/json:
            schema:
              properties:
                playerId:
                  type: integer
                  format: int64
                  description: The ID of the player
                price:
                  type: number
                  format: float
                  description: The price of the player
      responses:
        "201":
          description: The transfer was added successfully
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The ID of the transfer

  /transfers/{transferId}:
    patch:
      tags:
        - /transfers
      summary: Update transfer price
      parameters:
        - $ref: "#/components/parameters/transferIdPath"
      requestBody:
        description: The new price for the transfer
        required: true
        content:
          application/json:
            schema:
              properties:
                price:
                  type: number
                  format: float
                  description: The new price for the player
      responses:
        "204":
          description: The price was updated successfully

    delete:
      tags:
        - /transfers
      summary: Delete transfer
      parameters:
        - $ref: "#/components/parameters/transferIdPath"
      responses:
        "204":
          description: The transfer was deleted successfully

  /transfers/{transferId}/offers:
    post:
      tags:
        - /transfers
      summary: Place offer
      parameters:
        - $ref: "#/components/parameters/transferIdPath"
      requestBody:
        description: The details of the offer
        required: true
        content:
          application/json:
            schema:
              properties:
                price:
                  type: number
                  format: float
                  description: The price of the offer
      responses:
        "201":
          description: The offer was placed successfully
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    format: int64
                    description: The ID of the offer

  /offers/{offerId}:
    patch:
      tags:
        - /offers
      summary: Update offer
      parameters:
        - $ref: "#/components/parameters/offerIdPath"
      requestBody:
        description: The new price and status for the offer
        required: true
        content:
          application/json:
            schema:
              properties:
                price:
                  type: number
                  format: float
                  description: The new price for the offer
                status:
                  type: integer
                  format: int64
                  description: The status of the offer (0 - active, 1 - accepted, 2 - declined)
      responses:
        "204":
          description: The price was updated successfully

    delete:
      tags:
        - /offers
      summary: Delete offer
      parameters:
        - $ref: "#/components/parameters/offerIdPath"
      responses:
        "204":
          description: The offer was deleted successfully

components:
  parameters:
    leagueIdPath:
      in: path
      name: leagueId
      required: true
      schema:
        $ref: "#/components/schemas/leagueId"

    leagueIdQuery:
      in: query
      name: leagueId
      required: false
      schema:
        $ref: "#/components/schemas/leagueId"

    transferIdPath:
      in: path
      name: transferId
      required: true
      schema:
        $ref: "#/components/schemas/transferId"

    playerIdPath:
      in: path
      name: playerId
      required: true
      schema:
        $ref: "#/components/schemas/playerId"

    offerIdPath:
      in: path
      name: offerId
      required: true
      schema:
        $ref: "#/components/schemas/offerId"

    userIdPath:
      in: path
      name: userId
      required: true
      schema:
        $ref: "#/components/schemas/userId"

    managerIdPath:
      in: path
      name: managerId
      required: true
      schema:
        $ref: "#/components/schemas/managerId"

    scheduleIdPath:
      in: path
      name: scheduleId
      required: true
      schema:
        $ref: "#/components/schemas/scheduleId"

    scheduleIdQuery:
      in: query
      name: scheduleId
      required: false
      schema:
        $ref: "#/components/schemas/scheduleId"

    competitorIdPath:
      in: path
      name: competitorId
      required: true
      schema:
        $ref: "#/components/schemas/competitorId"

    seasonIdPath:
      in: path
      name: seasonId
      required: true
      schema:
        $ref: "#/components/schemas/seasonId"

  schemas:
    userId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the user

    user:
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          format: email
          description: The email of the user
        portraitUrl:
          type: string
          format: uri
          description: The URL of the user's portrait

    userWithId:
      allOf:
        - $ref: "#/components/schemas/userId"
        - $ref: "#/components/schemas/user"

    managerId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the manager

    manager:
      $ref: "#/components/schemas/user"

    managerWithId:
      allOf:
        - $ref: "#/components/schemas/managerId"
        - $ref: "#/components/schemas/manager"

    managerSettings:
      properties:
        admin:
          type: boolean
          description: If the manager is an admin

    managerWithSettingsAndId:
      allOf:
        - $ref: "#/components/schemas/managerWithId"
        - properties:
            settings:
              $ref: "#/components/schemas/managerSettings"

    managerPreview:
      allOf:
        - $ref: "#/components/schemas/managerWithId"
        - properties:
            totalPoints:
              type: integer
              format: int64
              description: The total points of the manager
            averagePoints:
              type: number
              format: float
              description: The average points of the manager
            squadValue:
              type: number
              format: float
              description: The value of the squad of the manager

    managerSummary:
      properties:
        rank:
          type: integer
          format: int64
          description: The rank of the manager
        scheduleVictories:
          type: integer
          format: int64
          description: The victories of the manager
        pointsTotal:
          type: integer
          format: int64
          description: The total points of the manager
        pointsAverage:
          type: number
          format: float
          description: The average points of the manager
        transfers:
          type: integer
          format: int64
          description: The amount of transfers of the manager
        squadValue:
          type: number
          format: float
          description: The value of the squad of the manager
        transferProfit:
          type: number
          format: float
          description: The profit of the managar

    managerPoints:
      allOf:
        - $ref: "#/components/schemas/seasonId"
        - properties:
            pointsTotal:
              type: integer
              format: int64
              description: The total points of the managar
            pointsAverage:
              type: number
              format: float
              description: The average points of the managar
            scheduleVictories:
              type: integer
              format: int64
              description: The victories of the managar
            schedules:
              items:
                allOf:
                  - $ref: "#/components/schemas/scheduleId"
                  - properties:
                      dateTime:
                        type: string
                        format: date-time
                        description: The date and time of the schedule
                      points:
                        type: integer
                        format: int64
                        description: The points of the managar

    lineup:
      items:
        type: integer
        format: int64
        description: The ID of the player

    transferId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the transfer

    transfer:
      properties:
        price:
          type: number
          format: float
          description: The price of the transfer
        entryDateTime:
          type: string
          format: date-time
          description: The date the transfer was added
        exitDateTime:
          type: string
          format: date-time
          description: The date the transfer will be removed
        offers:
          items:
            $ref: "#/components/schemas/offerWithId"

    transferWithId:
      allOf:
        - $ref: "#/components/schemas/transferId"
        - $ref: "#/components/schemas/transfer"

    transferPreview:
      allOf:
        - $ref: "#/components/schemas/transferWithId"
        - properties:
            player:
              $ref: "#/components/schemas/playerPreview"

    transferPreviewWithManager:
      allOf:
        - $ref: "#/components/schemas/transferWithId"
        - properties:
            player:
              allOf:
                - $ref: "#/components/schemas/playerPreview"
                - properties:
                    manager:
                      $ref: "#/components/schemas/managerWithId"

    playerId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the player

    player:
      properties:
        firstName:
          type: string
          description: The first name of the player
        lastName:
          type: string
          description: The last name of the player
        portraitUrl:
          type: string
          format: uri
          description: The URL of the player's portrait
        position:
          type: integer
          format: int64
          description: The position of the player (0 - goalkeeper - gk, 1 - defense - def, 2 - midfield - mf, 3 - forward - fwd)
        number:
          type: integer
          format: int64
          description: The number of the player
        status:
          type: integer
          format: int64
          description: The status of the player (0 - fit, 1 - injured, 2 - stricken)
        redCards:
          type: integer
          format: int64
          description: The red cards of the player
        yellowCards:
          type: integer
          format: int64
          description: The yellow cards of the player

    playerWithId:
      allOf:
        - $ref: "#/components/schemas/playerId"
        - $ref: "#/components/schemas/player"

    playerProfile:
      $ref: "#/components/schemas/player"
      properties:
        competitor:
          $ref: "#/components/schemas/competitorWithId"
        manager:
          $ref: "#/components/schemas/managerWithId"

    playerPreview:
      allOf:
        - $ref: "#/components/schemas/playerWithId"
        - properties:
            totalPoints:
              type: integer
              format: int64
              description: The total points of the player
            averagePoints:
              type: number
              format: float
              description: The average points of the player
            pointsHistory: # Only last 5
              items:
                properties:
                  dateTime:
                    type: string
                    format: date-time
                    description: The date and time of the points
                  points:
                    type: integer
                    format: int64
                    description: The points of the player
            marketHistory: # Only last 2
              items:
                properties:
                  dateTime:
                    type: string
                    format: date-time
                    description: The date and time of the market value
                  value:
                    type: number
                    format: float
                    description: The market value of the player
            competitor:
              $ref: "#/components/schemas/competitorWithId"

    playerSummary:
      properties:
        totalPoints:
          type: integer
          format: int64
          description: The total points of the player
        averagePoints:
          type: number
          format: float
          description: The average points of the player
        pointsHistory: # Only last 7
          items:
            properties:
              dateTime:
                type: string
                format: date-time
                description: The date and time of the points
              points:
                type: integer
                format: int64
                description: The points of the player
        marketHistory: # Only last 7
          items:
            properties:
              dateTime:
                type: string
                format: date-time
                description: The date and time of the market value
              value:
                type: number
                format: float
                description: The market value of the player
        goals:
          type: integer
          format: int64
          description: The goals of the player
        assists:
          type: integer
          format: int64
          description: The assists of the player
        schedulesPlayed:
          type: integer
          format: int64
          description: The schedules played by the player
        schedulesAvailable:
          type: integer
          format: int64
          description: The schedules available for the player
        startingLineupAppearances:
          type: integer
          format: int64
          description: The amount of times the player was in the starting lineup
        minutesPlayedAverage:
          type: integer
          format: int64
          description: The average minutes played by the player
        status:
          type: integer
          format: int64
          description: The status of the player (0 - fit, 1 - injured, 2 - stricken)
        redCards:
          type: integer
          format: int64
          description: The red cards of the player
        yellowCards:
          type: integer
          format: int64
          description: The yellow cards of the player
        schedules:
          items:
            $ref: "#/components/schemas/schedule"

    playerSeasonPoints:
      allOf:
        - $ref: "#/components/schemas/seasonId"
        - properties:
            pointsTotal:
              type: integer
              format: int64
              description: The total points of the player
            pointsAverage:
              type: number
              format: float
              description: The average points of the player
            minutesPlayedAverage:
              type: integer
              format: int64
              description: The average minutes played by the player
            schedules:
              items:
                $ref: "#/components/schemas/playerSchedulePoints"

    playerSchedulePoints:
      allOf:
        - $ref: "#/components/schemas/scheduleWithId"
        - properties:
            points:
              type: integer
              format: int64
              description: The points of the player
            minutesPlayed:
              type: integer
              format: int64
              description: The minutes played by the player
            goals:
              type: integer
              format: int64
              description: The goals of the player
            assists:
              type: integer
              format: int64
              description: The assists of the player
            redCards:
              type: integer
              format: int64
              description: The red cards of the player
            yellowCards:
              type: integer
              format: int64
              description: The yellow cards of the player
            startingLineup:
              type: boolean
              description: If the player was in the starting lineup

    playerMarket:
      properties:
        lowestValue:
          type: number
          format: float
          description: The lowest value of the player
        lowestValueDateTime:
          type: string
          format: date-time
          description: The date and time of the lowest value
        highestValue:
          type: number
          format: float
          description: The highest value of the player
        highestValueDateTime:
          type: string
          format: date-time
          description: The date and time of the highest value
        history:
          items:
            properties:
              dateTime:
                type: string
                format: date-time
                description: The date and time of the market value
              value:
                type: number
                format: float
                description: The market value of the player

    offerId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the offer

    offer:
      properties:
        price:
          type: number
          format: float
          description: The price of the offer
        placedDateTime:
          type: string
          format: date-time
          description: The date the offer was placed
        status:
          type: integer
          format: int64
          description: The status of the offer (0 - active, 1 - accepted, 2 - declined, 3 - drafted)
        manager:
          $ref: "#/components/schemas/managerWithId"

    offerWithId:
      allOf:
        - $ref: "#/components/schemas/offerId"
        - $ref: "#/components/schemas/offer"

    competitorId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the competitor

    competitor:
      properties:
        name:
          type: string
          description: The name of the competitor
        abbreviation:
          type: string
          description: The abbreviation of the competitor
        portraitUrl:
          type: string
          format: uri
          description: The URL of the competitor's portrait

    competitorWithId:
      allOf:
        - $ref: "#/components/schemas/competitorId"
        - $ref: "#/components/schemas/competitor"

    competitorWithIdAndScore:
      allOf:
        - $ref: "#/components/schemas/competitorWithId"
        - properties:
            score:
              type: integer
              format: int64
              description: The score of the competitor

    competitorPreview:
      allOf:
        - $ref: "#/components/schemas/competitorWithId"
        - properties:
            schedulesPlayed:
              type: integer
              format: int64
              description: The schedules played by the competitor
            goalDifference:
              type: integer
              format: int64
              description: The goal difference of the competitor
            points:
              type: integer
              format: int64
              description: The amount of points for the competitor

    competitorSummary:
      allOf:
        - $ref: "#/components/schemas/competitor"
        - properties:
            rank:
              type: integer
              format: int64
              description: The rank of the competitor
            wins:
              type: integer
              format: int64
              description: The victories of the competitor
            draws:
              type: integer
              format: int64
              description: The draws of the competitor
            losses:
              type: integer
              format: int64
              description: The losses of the competitor
            squadValue:
              type: number
              format: float
              description: The value of the competitor
            players:
              items:
                $ref: "#/components/schemas/playerPreview"

    scheduleId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the schedule

    schedule:
      properties:
        dateTime:
          type: string
          format: date-time
          description: The date and time of the event
        competitors:
          items:
            $ref: "#/components/schemas/competitorWithIdAndScore"

    scheduleWithId:
      allOf:
        - $ref: "#/components/schemas/scheduleId"
        - $ref: "#/components/schemas/schedule"

    seasonId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the season

    leagueId:
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the league

    league:
      properties:
        name:
          type: string
          description: The name of the League
        description:
          type: string
          description: The description of the League
        portraitUrl:
          type: string
          format: uri
          description: The URL of the League's portrait

    leagueWithId:
      allOf:
        - $ref: "#/components/schemas/leagueId"
        - $ref: "#/components/schemas/league"

    leagueSettings:
      properties:
        private:
          type: boolean
          description: If the League is private
        drawPlayers:
          type: boolean
          description: If the League will draw players
        competition:
          type: integer
          format: int64
          description: The competition of the League (0 - SFL)
        squadLimit:
          type: integer
          format: int64
          description: The squad limit of the League
        managerLimit:
          type: integer
          format: int64
          description: The manager limit of the League
        startingBudget:
          type: number
          format: float
          description: The starting budget of the League
        winterBreakReset:
          type: boolean
          description: If the league will be reset after the winter break

    leagueSummary:
      allOf:
        - $ref: "#/components/schemas/league"
        - properties:
            settings:
              $ref: "#/components/schemas/leagueSettings"
            managers:
              items:
                $ref: "#/components/schemas/managerWithSettingsAndId"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
